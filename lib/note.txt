# Solid Principles
- S - Single Responsibility Principle
- O - Open-Closed Principle
- L - Liskov Substitution Principle
- I - Interface Segregation Principle
- D - Dependency Inversion Principle

Single Responsibility Principle
- A class Should have only one reason to change(One Responsibility).

Open Closed Principle
- A software entity(class, function etc) Should be open for extension but closed 
for modification.

Liskov Substitution Principle
- Objects of a superclass should be replaceable with objects of it subclasses without 
affecting the correctness of the program.

Interface Segregation Principle
- Client should not be forced to depend on methods it does use.

Dependency Inversion Principle
- High level modules should not depend on low level modules. 
Both should depend on abstractions.
- Abstractions should not depend on details. Details should depend on abstractions.